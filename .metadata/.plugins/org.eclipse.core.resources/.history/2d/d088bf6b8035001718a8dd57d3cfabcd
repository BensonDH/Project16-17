package asteroids.programs;

import java.util.*;

import asteroids.programs.expressions.*;
import asteroids.programs.statements.*;

public class Program {
	
	/**
	 * Create a new program with the given functions and body.
	 */
	public Program(List<Function> functions, Statement body){
		this.body = body;
		this.functions = functions;
	}
	
	/**
	 * Execute this program.
	 * 
	 * @param executionTime
	 * 			The time that this program has to execute.
	 * @return
	 * 			All the values that were printed during execution of this program.
	 */
	public List<Object> execute(double executionTime){
		setExecutionTimeLeft(executionTime);
		PrintedValues printedValuesDuringExecutation =  new PrintedValues();
		
		getBody().execute(getFunctions(), this, printedValuesDuringExecutation);
		
		return printedValuesDuringExecutation.getPrintedValues();
	}
	
	/**
	 * Get the time that this program has left to run.
	 */
	public double getExecutionTimeLeft(){
		return this.executionTimeLeft;
	}
	
	/**
	 * Set the ExecutionTimeLeft of this program to the given value.
	 */
	public void setExecutionTimeLeft(double time){
		if ( 0 <= time)
			this.executionTimeLeft = time;
		else
			this.executionTimeLeft = 0;
	}
	
	/**
	 * Variable registering the time this program has left to run.
	 */
	private double executionTimeLeft = Double.POSITIVE_INFINITY;
	
	public List<Function> getFunctions(){
		return this.functions;
	}
	
	private List<Function> functions;
	
	public Statement getBody(){
		return this.body;
	}
	
	private Statement body;

	
	public void resume(){
		this.paused = false;
	}
	
	public void pause(){
		this.paused = true;
	}
	
	public boolean isPaused() {
		return this.paused;
	}
	
	private boolean paused = false;
}
