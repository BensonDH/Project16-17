package asteroids.tests;

import static org.junit.Assert.*;

import org.junit.*;
import org.junit.Test;
import asteroids.model.*;

public class ShipTests {
	
	private static final double EPSILON = 0.0001;
	
	Ship ship1;
	World world1;
	Bullet bullet1;
	Bullet bullet2;
	Bullet bullet3;
	
	@Before
	public void SetUp(){
		ship1 = new Ship(50, 50, 0, 0, 10, 0);
		world1 = new World(50000,50000);
		bullet1 = new Bullet(50,50,0,0,1);
		bullet2 =  new Bullet(50,50,0,0,1);
		bullet3 =  new Bullet(50,50,0,0,1);
		ship1.addBullet(bullet1,bullet2,bullet3);
		ship1.setWorld(world1);
	}	
	
	
	// CONSTRUCTOR TESTS
	@Test
	public void constructorNormalCase(){
		Ship ship = new Ship(10, -10, 500, -500, 20, Math.PI);

		Vector pos = ship.getPosition();
		assertEquals(10, pos.getX(), EPSILON);
		assertEquals(-10, pos.getY(), EPSILON);
		
		Vector vel = ship.getVelocity();
		assertEquals(500, vel.getX(), EPSILON);
		assertEquals(-500, vel.getY(), EPSILON);
		
		assertEquals(20, ship.getRadius(), EPSILON);
		assertEquals(Math.PI, ship.getAngle(), EPSILON);
	}

	@Test
	public void constructorNormalCase2(){
		Ship ship = new Ship(10, 10, 50, 100, 20, 0, 0);
		
		Vector pos = ship.getPosition();
		assertEquals(10, pos.getX(), EPSILON);
		assertEquals(10, pos.getY(), EPSILON);
		
		Vector vel = ship.getVelocity();
		assertEquals(50, vel.getX(), EPSILON);
		assertEquals(100, vel.getY(), EPSILON);
		
		assertEquals(20, ship.getRadius(), EPSILON);
		assertEquals(0, ship.getAngle(), EPSILON);
		assertEquals(ship.getBaseMass(), ship.getMinimalMass(), EPSILON);
	}
	
	@Test
	public void defaultConstructor(){
		Ship ship = new Ship();
		
		Vector pos = ship.getPosition();
		assertEquals(0, pos.getX(), EPSILON);
		assertEquals(0, pos.getY(), EPSILON);
		
		Vector vel = ship.getVelocity();
		assertEquals(0, vel.getX(), EPSILON);
		assertEquals(0, vel.getY(), EPSILON);
		assertEquals(10, ship.getRadius(), EPSILON);
		assertEquals(0, ship.getAngle(), EPSILON);
	}
	
	@Test (expected = IllegalArgumentException.class)
	public void invalidPositionXConstructor(){
		new Ship(Double.NaN,10,10,10,10,Math.PI);
	}
	
	@Test(expected = IllegalArgumentException.class)
	public void invalidPositionYConstructor(){
		new Ship(10, Double.NaN, 10, 10, 10, Math.PI);		
	}
	
	@Test
	public void invalidVelocityXConstructor() {
		Ship ship1 = new Ship(10, 10, Double.NaN, 10, 10, Math.PI);

		assertEquals(0, ship1.getVelocity().getX(), EPSILON);
	}
	
	@Test
	public void invalidVelocityYConstructor() {
		Ship ship1 = new Ship(10, 10, 10, Double.NaN, 10, Math.PI);
		assertEquals(0, ship1.getVelocity().getY(), EPSILON);
	}
	
	@Test
	public void maxValueVelocityConstructor(){
		Ship ship1 = new Ship(10, 10, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 10, Math.PI);
		
		Vector vel = ship1.getVelocity();
		assertEquals(0, vel.getX(), EPSILON);
		assertEquals(0, vel.getY(), EPSILON);
		
		ship1.setVelocity(300000, 300000);
		vel = ship1.getVelocity();
		assertEquals(300000*Math.cos(Math.PI/4), vel.getX(), EPSILON);
		assertEquals(300000*Math.sin(Math.PI/4), vel.getY(), EPSILON);
		assertEquals(300000, ship1.getTotalVelocity(), EPSILON);
		
		ship1.setVelocity(-300000, 300000);
		vel = ship1.getVelocity();
		assertEquals(-300000*Math.cos(Math.PI/4), vel.getX(), EPSILON);
		assertEquals(300000*Math.sin(Math.PI/4), vel.getY(), EPSILON);
		assertEquals(300000, ship1.getTotalVelocity(), EPSILON);
	}
	
	@Test (expected = AssertionError.class)
	public void invalidHighAngleConstructor(){
		new Ship(10, 10, 10, 10, 10, 10);
	}
	
	@Test (expected = AssertionError.class)
	public void invalidLowAngleConstructor(){
		new Ship(10, 10, 10, 10, 10, -10);
	}
	
	@Test (expected=IllegalArgumentException.class)
	public void invalidRadiusConstructor(){
		new Ship(10, 10, 10, 10, -100, 0);
	}
	
	@Test (expected=IllegalArgumentException.class)
	public void infiniteRadiusConstructor(){
		new Ship(10, 10, 10, 10, Double.POSITIVE_INFINITY, 0);
	}
	
	@Test (expected=IllegalArgumentException.class)
	public void NaNRadiusConstructor(){
		new Ship(10, 10, 10, 10, Double.NaN, 0);
	}

	
	// GETTERS AND SETTERS VALID VALUES TESTS
	@Test
	public void testPosition(){
		Vector position = ship1.getPosition();
		
		assertEquals(50, position.getX(), EPSILON);
		assertEquals(50, position.getY(), EPSILON);
		ship1.setPosition(25, -50);
		
		position = ship1.getPosition();
		
		assertEquals(25, position.getX(), EPSILON);
		assertEquals(-50, position.getY(), EPSILON);
	

	}

	public void testVelocity(){
		Vector velocity = ship1.getVelocity();
		
		assertEquals(-5, velocity.getX(), EPSILON);
		assertEquals(10, velocity.getY(), EPSILON);
		assertEquals(Math.sqrt(Math.pow(5, 2.0)+Math.pow(10, 2.0)), ship1.getTotalVelocity(), EPSILON);
		ship1.setVelocity(30, -50);
		
		velocity = ship1.getVelocity();
		assertEquals(30, velocity.getX(), EPSILON);
		assertEquals(-50, velocity.getY(), EPSILON);
		assertEquals(Math.sqrt(Math.pow(30, 2.0)+Math.pow(50, 2.0)), ship1.getTotalVelocity(), EPSILON);
		//Back to original state
		ship1.setVelocity(-5, 10);
	}
	
	@Test
	public void testAngle(){
		
		assertEquals(0, ship1.getAngle(), EPSILON);
		ship1.setAngle(2*Math.PI);
		assertEquals(2*Math.PI, ship1.getAngle(), EPSILON);
		
		// Back to original state
		ship1.setAngle(0);
	}


	// GETTERS AND SETTERS INVALID VALUES TESTS
	@Test (expected = IllegalArgumentException.class)
	public void testPositionXInvalidValue(){
		ship1.setPosition(Double.NaN, 0);
	}
	
	@Test (expected = IllegalArgumentException.class)
	public void testPositionYInvalidValue(){
		ship1.setPosition(0, Double.NaN);
	}

	@Test
	public void testVelocityInvalidValue(){
		
		ship1.setVelocity(Double.NaN, 0);
		Vector velocity = ship1.getVelocity();
		assertEquals(0, velocity.getX(), EPSILON);
		assertEquals(0, velocity.getY(), EPSILON);
		
		ship1.setVelocity(0, Double.NaN);
		velocity = ship1.getVelocity();
		assertEquals(0, velocity.getX(), EPSILON);
		assertEquals(0, velocity.getY(), EPSILON);
	}

	@Test (expected = AssertionError.class)
	public void testAngleNegativeInvalidValue(){
		ship1.setAngle(-10);
	}
	
	@Test (expected = AssertionError.class)
	public void testAnglePositiveInvalidValue(){
		ship1.setAngle(Double.MAX_VALUE);
	}
	
	@Test (expected = AssertionError.class)
	public void testAngleNaNValue(){
		ship1.setAngle(Double.NaN);
	}
	

	//move, thrust, turn, killSpeed
	public void normalCases(){
		Ship ship = new Ship(0, 0, 10, 10, 20, Math.PI/4);
		// move
		ship.move(10);
		
		Vector newPos = ship.getPosition();
		assertEquals(100, newPos.getX(), EPSILON);
		assertEquals(100, newPos.getY(), EPSILON);
		
		// Back to original state
		ship.setPosition(0, 0);
		
		// thrust
		ship.thrust(100);
		Vector newVel = ship.getVelocity();
		assertEquals(50*Math.cos(Math.PI/4), newVel.getX(), EPSILON);
		assertEquals(50*Math.sin(Math.PI/4), newVel.getY(), EPSILON);
		
		// killVelocity
		ship.killVelocity();
		newVel = ship.getVelocity();
		assertEquals(0, newVel.getX(), EPSILON);
		assertEquals(0, newVel.getY(), EPSILON);
		
		// turn
		ship.turn(Math.PI);
		assertEquals(5*Math.PI/4, ship.getAngle(), EPSILON);
	}
	
	@Test (expected=IllegalArgumentException.class)
	public void infiniteDuration(){
		ship1.move(Double.POSITIVE_INFINITY);
	}
	
	@Test (expected=IllegalArgumentException.class)
	public void NaNDuration(){
		ship1.move(Double.NaN);
	}
	
	@Test
	public void largeAmount(){
		Ship ship = new Ship();
		ship.setThrust(true);
		ship.thrust(Double.POSITIVE_INFINITY);
		Vector vel = ship.getVelocity();
		assertEquals(0, vel.getX(), EPSILON);
		assertEquals(0, vel.getY(), EPSILON);
		
		ship.thrust(450000000);
		vel = ship.getVelocity();
		assertEquals(300000, vel.getX(), EPSILON);
		assertEquals(0, vel.getY(), EPSILON);
	}
	
	@Test (expected=AssertionError.class)
	public void testInvalidTurn(){
		ship1.turn(100);
	}
	
	@Test
	public void testKillVelocity(){
		Ship ship = new Ship(0, 0, 100, 100, 20, 0);
		
		ship.killVelocity();
		Vector vel = ship.getVelocity();
		assertEquals(0, vel.getX(), EPSILON);
		assertEquals(0, vel.getY(), EPSILON);
	}

	
	// Checkers
	@Test
	public void testIsValidVelocity(){
		assertTrue(ship1.isValidVelocity(10, 10));
		assertFalse(ship1.isValidVelocity(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY));
		
	}
	
	@Test
	public void testIsValidSpeedLimit(){
		assertTrue(ship1.isValidSpeedLimit(150000));
		assertFalse(ship1.isValidSpeedLimit(300001));
		assertFalse(ship1.isValidSpeedLimit(-150000));
	}
	
	@Test
	public void testIsValidAngle(){
		assertTrue(ship1.isValidAngle(Math.PI/2));
		assertFalse(ship1.isValidAngle(-10));
		assertFalse(ship1.isValidAngle(100));
	}
	

	// getDistanceBetween, overlap, getTimeToCollision, getCollisionPosition TESTS
	@Test
	public void DistanceBetweenTests() {	
		// create two test ships that will only be used for this experiment
		// case 1 ships are not overlapping
		Ship ship1 = new Ship();
		Ship ship2 = new Ship(40, 0, 0, 0, 10, 0);
		assertEquals(20, ship1.getDistanceBetween(ship2), EPSILON);
		
		//case 2 ships are touching
		ship2.setPosition(20, 0);
		assertEquals(0, ship1.getDistanceBetween(ship2), EPSILON);
		
		//case 3 ships are overlapping negative value expected
		ship2.setPosition(15, 0);
		assertEquals(-5, ship1.getDistanceBetween(ship2), EPSILON);
		
		// Case 4 one ship is completely in the other ship
		ship2.setPosition(0.75, 0);
		Ship ship3 = new Ship(0, 0, 0, 0, 30, 0);
		assertEquals(ship2.getDistanceBetween(ship3), -19.25, EPSILON);
		
		// case 5  get distance between ship 1 and ship1, should return 0
		assertEquals(0, ship1.getDistanceBetween(ship1), EPSILON);
	}	
	
	@Test
	public void simpleCase1(){
		// SCENARIO: ship1 is moving right towards ship2 with a velocity of [10, 0].
		//			 ship2 is standing still at [90, 20].
		//			 ship1 and ship 2 have a radius of 10.
		Ship ship1 = new Ship(20, 20, 10, 0, 10, 0);
		Ship ship2 = new Ship(90, 20, 0, 0, 10, 0);
		World world = new World(10000,10000);
		world.addEntity(ship1);
		world.addEntity(ship2);
		// distanceBetween
		double distanceBetween = ship1.getDistanceBetween(ship2);
		assertEquals(50, distanceBetween, EPSILON);
		
		// overlap
		assertFalse(ship1.overlap(ship2));
		assertFalse(ship2.overlap(ship1));
		assertTrue(ship1.overlap(ship1));
		
		// timeToCollision
		double timeToCollision = ship1.getTimeToCollision(ship2);
		assertEquals(5, timeToCollision, EPSILON);
		
		// collisionPosition
		Vector collisionPosition = ship1.getCollisionPosition(ship2);
		assertEquals(80, collisionPosition.getX(), EPSILON);
		assertEquals(20, collisionPosition.getY(), EPSILON);
	} 
	
	@Test
	public void simpleCase2(){
		// SCENARIO: ship1 is moving left towards ship2 with a velocity of [-10, 0].
		//			 ship2 is standing still at [0, 0].
		//			 ship1 and ship 2 have a radius of 10.
		Ship ship1 = new Ship(90, 20, -10, 0, 10, 0);
		Ship ship2 = new Ship(20, 20, 0, 0, 10, 0);
		World world = new World(10000,10000);
		world.addEntity(ship1);
		world.addEntity(ship2);
		// distanceBetween
		double distanceBetween = ship1.getDistanceBetween(ship2);
		assertEquals(50, distanceBetween, EPSILON);
		
		// overlap
		assertFalse(ship1.overlap(ship2));
		assertFalse(ship2.overlap(ship1));
		assertTrue(ship1.overlap(ship1));
		
		// timeToCollision
		double timeToCollision = ship1.getTimeToCollision(ship2);
		assertEquals(5, timeToCollision, EPSILON);
		
		// collisionPosition
		Vector collisionPosition = ship1.getCollisionPosition(ship2);
		assertEquals(30, collisionPosition.getX(), EPSILON);
		assertEquals(20, collisionPosition.getY(), EPSILON);
	} 

	@Test
	public void simpleCase3(){
		// SCENARIO: ship1 is standing still in the origin	
		// 		     ship2 is moving right towards ship1 from above
		
		Ship ship1 = new Ship(20, 20, 0, 0,10, 0);
		Ship ship2 = new Ship(20, 80, 0, -10, 10, 0);
		World world = new World(10000,10000);
		world.addEntity(ship1);
		world.addEntity(ship2);
		// distanceBetween
		double distanceBetween = ship1.getDistanceBetween(ship2);
		assertEquals(40, distanceBetween, EPSILON);
		
		distanceBetween = ship2.getDistanceBetween(ship1);
		assertEquals(40, distanceBetween, EPSILON);
		
		// overlap
		assertFalse(ship1.overlap(ship2));
		assertFalse(ship2.overlap(ship1));
		assertTrue(ship1.overlap(ship1));
		
		// timeToCollision
		double timeToCollision = ship1.getTimeToCollision(ship2);
		assertEquals(4, timeToCollision, EPSILON);
		
		timeToCollision = ship2.getTimeToCollision(ship1);
		assertEquals(4, timeToCollision, EPSILON);
		
		// collisionPosition
		Vector collisionPosition = ship1.getCollisionPosition(ship2);
		assertEquals(20, collisionPosition.getX(), EPSILON);
		assertEquals(30, collisionPosition.getY(), EPSILON);
		
		collisionPosition = ship2.getCollisionPosition(ship1);
		assertEquals(20, collisionPosition.getX(), EPSILON);
		assertEquals(30, collisionPosition.getY(), EPSILON);
	}

	@Test
	public void symetricalCase(){
		// SCENARIO: ship1 is moving with velocity [10cos(PI/3), 10sin(PI/3)]
		//			 ship2 is moving with velocity [-10cos(PI/3), 10sin(PI/3)]
		// 			 Both ships are moving on an equilateral triangle.
		Ship ship1 = new Ship(20, 20, 10*Math.cos(Math.PI/3), 10*Math.sin(Math.PI/3), 10, 0);
		Ship ship2 = new Ship(80, 20, -10*Math.cos(Math.PI/3), 10*Math.sin(Math.PI/3), 10, 0);
		World world = new World(10000,10000);
		world.addEntity(ship1);
		world.addEntity(ship2);
		// distanceBetween
		double distanceBetween = ship1.getDistanceBetween(ship2);
		assertEquals(40, distanceBetween, EPSILON);
		
		// overlap
		assertFalse(ship1.overlap(ship2));
		assertFalse(ship2.overlap(ship1));
		assertTrue(ship1.overlap(ship1));
		
		// timeToCollision
		double timeToCollision = ship1.getTimeToCollision(ship2);
		assertEquals(4, timeToCollision, EPSILON);
		
		// collisionPosition
		Vector collisionPosition = ship1.getCollisionPosition(ship2);
		assertEquals(30+40*Math.cos(Math.PI/3), collisionPosition.getX(), EPSILON);
		assertEquals(20+40*Math.sin(Math.PI/3), collisionPosition.getY(), EPSILON);
	}
	
	//Mass
	
	@Test
	public void getTotalMass(){
		double mass = ship1.getBaseMass() + 3*bullet1.getTotalMass();
		assertEquals(mass, ship1.getTotalMass(),EPSILON);
	}
	
	//Associations
	@Test
	public void normalFire(){
		ship1.fireBullet();
		assertEquals(2,ship1.getNbBulletsLoaded(),EPSILON);
		ship1.fireBullet();
		assertEquals(1, ship1.getNbBulletsLoaded(),EPSILON);
		ship1.fireBullet();
		assertEquals(0, ship1.getNbBulletsLoaded(),EPSILON);
		ship1.fireBullet();
		assertEquals(0, ship1.getNbBulletsLoaded(),EPSILON);
		assertTrue( bullet1.getWorld() == ship1.getWorld());
		assertTrue(bullet1.getSourceShip() == ship1);
		assertTrue(bullet2.getShip() == null);
		assertEquals(1,bullet1.getRadius(),EPSILON);
		assertEquals(61,bullet1.getPosition().getX(),EPSILON);
	}
	
	@Test
	public void fireNearBorder(){
		World world = new World(61,61);
		ship1.setWorld(world);
		ship1.removeWorld();
		ship1.fireBullet();
		assertTrue(bullet1.isDead() || bullet2.isDead() || bullet3.isDead());
		
		

		
		
		
		
	}
	
	
	
	

}