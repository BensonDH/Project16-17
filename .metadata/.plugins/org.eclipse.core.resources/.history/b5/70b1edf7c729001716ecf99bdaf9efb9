package asteroids.model;

import be.kuleuven.cs.som.annotate.Basic;
import be.kuleuven.cs.som.annotate.Immutable;
import be.kuleuven.cs.som.annotate.Raw;

public class Planetoid extends MinorPlanet {
	
	public Planetoid(double positionX,double positionY,double velocityX,double velocityY,double radius,double mass, double speedLimit){
		super(positionX,positionY,velocityX,velocityY,radius,speedLimit);
		setBaseMass(mass);
	}
	

	
	// Mass [TOTAL]
	/**
	 * Return the mass of this bullet.
	 * 
	 * @return The total mass of this bullet, which is equal to the
	 * 		   volume of this bullet (a sphere) times the density of this 
	 * 		   bullet.
	 * 		   | result == (4/3)*PI*getDensity()*getRadius()^3
	 */
	@Basic
	public double getTotalMass(){
		return (4.0/3)* Math.PI* Math.pow(this.getRadius(), 3.0)*getDensity();
	}
  	@Basic @Raw
    public void setBaseMass(double mass){
    	if (isValidBaseMass(mass))
    		this.mass = mass;
    	else
    		this.mass = getMinimalMass();
    }
    
    /**
     * Returns the minimal base mass of this ship.
     * 
     * @return	The minimal base mass of this ship, which
     * 			is equal to the volume of this ship (a sphere)
     * 			times the density of this ship.
     * 			| result == (4/3)*PI*getDensity()*getRadius()^3
     */
   	@Basic
    public double getMinimalMass(){
    	return (4/3)*Math.PI*Math.pow(getRadius(), 3.0)*getDensity();
    }
    
    /**
     * Returns the base mass of this ship, this is the mass of this ship
     * without any bullets.
     */
   	@Basic
    public double getBaseMass(){
    	return this.mass;
    }
    
    /**
     * Check whether a given value is a valid base mass for this ship.
     * 
     * @param	mass
     * 			The mass that has to be verified.
     * @return 	True if and only if the given mass is larger than the
     * 		   	minimal base mass, false otherwise.
     * 			| result == (mass >= getMinimalMass())
     */
   	@Basic
    public boolean isValidBaseMass(double mass){
    	return mass >= getMinimalMass();
    }
    
    /**
     * Variable registering the base mass of this ship
     * this is the mass of this ship without the bullets.
     */
    private double mass;
    
  
	
	/**
	 * Return the density of the bullet.
	 */
	@Basic
	public double getDensity(){
		return Planetoid.density;
	}
	
	/**
	 * Variable registering the density of bullets.
	 */
	private static double density = 7.12*Math.pow(10.0, 12.0);
	
}
