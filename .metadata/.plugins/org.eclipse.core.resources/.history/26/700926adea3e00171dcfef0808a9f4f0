package asteroids.programs;

import java.util.*;

import asteroids.programs.statements.*;
import asteroids.part3.programs.SourceLocation;
import asteroids.programs.expressions.*;


/**
 * A class representing a function definition
 */
public class Function extends Executable {
	
	/**
	 * Create a new Function with the given functionName and body.
	 * @param functionName
	 * 			The name of this function.
	 * @param body
	 * 			The body of this function.
	 */
	public Function(String functionName, Statement body, SourceLocation sourceLocation){

		this.functionName = functionName;
		this.sourceLocation = sourceLocation;
	}
	
	/**
	 * Get the name of this function.
	 */
	public String getFunctionName(){
		return this.functionName;
	}
	
	/**
	 * A String representing the name of this Function.
	 */
	private final String functionName;
	
	/**
	 * Get the location where this function is located in the program.
	 */
	public SourceLocation getSourceLocation(){
		return this.sourceLocation;
	}
	
	/**
	 * Variable registering where this function is located in the program.
	 */
	private SourceLocation sourceLocation;
	
	/**
	 * Get the local variables that are initialized within this function
	 * at the time of invocation.
	 */
	public List<Variable<? extends Literal<?>>> getFunctionVariables(){
		return this.variables;
	}
	
	/**
	 * A list representing the local variables used in this function.
	 */
	private List<Variable<? extends Literal<?>>> variables = new ArrayList<Variable<? extends Literal<?>>>();
	
	private List<Variable<? extends Literal<?>>> parameters = new ArrayList<Variable<? extends Literal<?>>>();
	
	/**
	 * !! This method should not be used for a function.
	 */
	@Override
	public List<Object> execute(){
		return null;
	}
	
	public void execute(Program parentProgram){
		
		getBody().execute(this);
		
	}
	
	private Program associatedProgram;
	
	/**
	 * Check whether this function has been terminated.
	 */
	public boolean isTerminated(){
		return this.terminated;
	}
	
	/**
	 * Terminate this Function.
	 */
	public void terminate(){
		this.terminated = true;
	}
	
	/**
	 * Variable registering whether this function has been terminated.
	 */
	private boolean terminated = false;
	
	public static boolean isValidVariableName(String toBeChecked){
		// TODO kijken of de toBeChecked een functionName is
		if (toBeChecked.matches("[a-zA-Z0-9]*") && !invalidVariableNames.contains(toBeChecked))
			return true;
		else
			return false;
	}
	
	public static List<String> getInvalidVariableNames(){
		return Executable.invalidVariableNames;
	}
	
	private static List<String> invalidVariableNames = Arrays.asList("while","break","return","if","else","print","turn","fire","thrust_on","thrust_off","skip",
													"def","sqrt","null", "self", "getx", "gety", "getvx", "getvy","getradius","getdir",
													"ship","asteroid","planetoid","bullet","planet","any", "true", "false");
}
