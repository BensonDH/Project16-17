package asteroids.programs.expressions;

import java.util.List;

import asteroids.part3.programs.SourceLocation;
import asteroids.programs.*;
import asteroids.programs.exceptions.VariableException;

public class FunctionCallExpression extends Expression<Object> {

	public FunctionCallExpression(String functionName, List<Expression<?>> actualArgs, SourceLocation sourceLocation) {
		super(sourceLocation);
		this.invocatedFunctionName=functionName;
		this.actualArgs = actualArgs;
	}
	
	public String getFunctionName(){
		return this.invocatedFunctionName;
	}
	
	private final String invocatedFunctionName; 
	
	public List<Expression<?>> getActualArgs(){
		return this.actualArgs;
	}
	
	private final List<Expression<?>> actualArgs;
	
	@Override
	public Literal<Object> eval(Executable parentExecutor) {
		Function calledFunction = parentExecutor.findDefinedFunction(getFunctionName());
		
		if (calledFunction == null)
			throw new VariableException(getFunctionName());
		
		
	}

}
